require('dotenv').config();
const { VK } = require('vk-io');
const vk = new VK({
  token: process.env.VK_TOKEN // ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–æ–∫–µ–Ω
});

const { updates } = vk;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏–≥—Ä –≤ –º–∞—Ñ–∏—é
const games = new Map(); // chat_id ‚Üí gameState

// –ö–æ–º–∞–Ω–¥–∞: –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
updates.on('message', async (context) => {
  if (!context.isChat) return;

  const chatId = context.chatId;
  const text = context.text?.toLowerCase();
  const userId = context.senderId;

  if (text === '/–º–∞—Ñ–∏—è —Å—Ç–∞—Ä—Ç') {
    if (games.has(chatId)) {
      return context.send('–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ!');
    }

    const game = {
      phase: 'waiting', // waiting, night, day
      players: [],
      roles: [],
      host: userId,
      timer: null
    };

    games.set(chatId, game);

    await context.send(`üéÆ –ò–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: @id${userId}\n–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚Äî –Ω–∞–ø–∏—à–∏ /–º–∞—Ñ–∏—è –≤—Å—Ç—É–ø–∏—Ç—å\n(–ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–≥–¥–∞ –Ω–∞–±–µ—Ä—ë—Ç—Å—è 4 –∏–≥—Ä–æ–∫–∞)`);
  }

  if (text === '/–º–∞—Ñ–∏—è –≤—Å—Ç—É–ø–∏—Ç—å') {
    const game = games.get(chatId);
    if (!game || game.phase !== 'waiting') {
      return context.send('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞–ø–∏—à–∏ /–º–∞—Ñ–∏—è —Å—Ç–∞—Ä—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.');
    }

    if (game.players.includes(userId)) {
      return context.send('–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!');
    }

    game.players.push(userId);

    await context.send(`@id${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! (${game.players.length}/4)`);

    // –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç –ø—Ä–∏ 4 –∏–≥—Ä–æ–∫–∞—Ö
    if (game.players.length >= 4) {
      startMafiaGame(chatId);
    }
  }

  if (text === '/–º–∞—Ñ–∏—è —Å—Ç–æ–ø') {
    if (games.has(chatId)) {
      games.delete(chatId);
      clearTimeout(games.get(chatId)?.timer);
      await context.send('–ò–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
    }
  }
});

async function startMafiaGame(chatId) {
  const game = games.get(chatId);
  if (!game) return;

  game.phase = 'day';
  const playerCount = game.players.length;

  // –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏–º —Ä–æ–ª–∏: 1 –º–∞—Ñ–∏—è –Ω–∞ 4-5, 2 –Ω–∞ 6+
  const mafiaCount = playerCount >= 6 ? 2 : 1;
  const roles = ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'.repeat(playerCount - mafiaCount)] + ['–ú–∞—Ñ–∏—è'.repeat(mafiaCount)];
  game.roles = shuffle(roles);

  await vk.api.messages.send({
    chat_id: chatId,
    message: `–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! üé≠\n–§–∞–∑–∞: –î–µ–Ω—å 1\n–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${playerCount}\n–ú–∞—Ñ–∏—è: ${mafiaCount} —á–µ–ª–æ–≤–µ–∫.\n\n–î–Ω—ë–º –≤—Å–µ –æ–±—Å—É–∂–¥–∞—é—Ç, –∫–æ–≥–æ –≤—ã–≥–Ω–∞—Ç—å. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ‚Äî /–º–∞—Ñ–∏—è –≥–æ–ª–æ—Å [–Ω–æ–º–µ—Ä]\n–ù–æ—á—å—é –º–∞—Ñ–∏—è —É–±–∏–≤–∞–µ—Ç.`
  });

  // –ù–∞—á–Ω—ë–º —Ü–∏–∫–ª –¥–Ω—è/–Ω–æ—á–∏
  scheduleNextPhase(chatId, 'night', 2); // —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
}

function scheduleNextPhase(chatId, nextPhase, minutes) {
  const game = games.get(chatId);
  if (!game) return;

  game.timer = setTimeout(async () => {
    if (nextPhase === 'night') {
      await vk.api.messages.send({
        chat_id: chatId,
        message: 'üåÉ –ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å. –í—Å–µ –∑–∞—Å—ã–ø–∞—é—Ç. –ú–∞—Ñ–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ —É–±–∏—Ç—å (–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É: /–º–∞—Ñ–∏—è —É–±–∏—Ç—å [–Ω–æ–º–µ—Ä])'
      });
      game.phase = 'night';
      scheduleNextPhase(chatId, 'day', 2);
    } else {
      await vk.api.messages.send({
        chat_id: chatId,
        message: '‚òÄÔ∏è –ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å. –í—Å–µ –ø—Ä–æ—Å—ã–ø–∞—é—Ç—Å—è. –û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.'
      });
      game.phase = 'day';
      scheduleNextPhase(chatId, 'night', 2);
    }
  }, minutes * 60 * 1000);
}

function shuffle(array) {
  return array.sort(() => Math.random() - 0.5);
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
updates.start().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...');
});