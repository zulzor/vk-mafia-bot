require('dotenv').config();
const { VK } = require('vk-io');

const vk = new VK({
  token: process.env.VK_TOKEN
});

const { updates } = vk;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä
const games = new Map(); // chatId ‚Üí game

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
updates.on('message', async (context) => {
  if (context.isOutbox) return;

  const chatId = context.chatId;
  const text = context.text?.toLowerCase();
  const userId = context.senderId;

  // === –ö–û–ú–ê–ù–î–ê: /–º–∞—Ñ–∏—è ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ===
  if (text === '/–º–∞—Ñ–∏—è') {
    await context.send({
      message: 'üéÆ –ò–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      keyboard: {
        inline: false, // –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞)
        buttons: [
          [
            { label: 'üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', payload: JSON.stringify({ cmd: 'start_game' }) }
          ],
          [
            { label: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É', payload: JSON.stringify({ cmd: 'stop_game' }) }
          ]
        ]
      }
    });
  }

  // === –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–û–ö ===
  if (context.isPayloadJSON()) {
    const { cmd } = context.payload;

    if (cmd === 'start_game') {
      if (!context.isChat) {
        return context.send('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ.');
      }

      if (games.has(chatId)) {
        return context.send('–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!');
      }

      const game = {
        phase: 'waiting',
        players: [],
        roles: [],
        host: userId,
        timer: null
      };

      games.set(chatId, game);

      await context.send(`üéÆ –ò–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: @id${userId}\n–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /–º–∞—Ñ–∏—è –≤—Å—Ç—É–ø–∏—Ç—å`, {
        keyboard: {
          inline: false,
          buttons: [
            [
              { label: '‚úÖ –í—Å—Ç—É–ø–∏—Ç—å', payload: JSON.stringify({ cmd: 'join_game' }) }
            ],
            [
              { label: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É', payload: JSON.stringify({ cmd: 'stop_game' }) }
            ]
          ]
        }
      });

      // –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –Ω–∞–±–µ—Ä—ë—Ç—Å—è 4 –∏–≥—Ä–æ–∫–∞
      const autoStartTimer = setTimeout(() => {
        const game = games.get(chatId);
        if (game && game.phase === 'waiting' && game.players.length >= 4) {
          startMafiaGame(chatId);
        } else if (game) {
          games.delete(chatId);
          vk.api.messages.send({
            chat_id: chatId,
            message: '‚ùå –ù–∞–±—Ä–∞–ª–æ—Å—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
          });
        }
      }, 60_000);

      game.timer = autoStartTimer;
    }

    if (cmd === 'join_game') {
      if (!context.isChat) return;

      const game = games.get(chatId);
      if (!game || game.phase !== 'waiting') {
        return context.send('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞–ø–∏—à–∏—Ç–µ /–º–∞—Ñ–∏—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.');
      }

      if (game.players.includes(userId)) {
        return context.send('–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!');
      }

      game.players.push(userId);

      await context.send(`@id${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! (${game.players.length}/4)`);

      if (game.players.length >= 4) {
        clearTimeout(game.timer);
        startMafiaGame(chatId);
      }
    }

    if (cmd === 'stop_game') {
      if (!context.isChat) return;

      if (games.has(chatId)) {
        const game = games.get(chatId);
        clearTimeout(game.timer);
        games.delete(chatId);
        await context.send('üõë –ò–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
      } else {
        await context.send('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.');
      }
    }
  }

  // === –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: /–º–∞—Ñ–∏—è –≤—Å—Ç—É–ø–∏—Ç—å (–µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∂–∞–ª–∞—Å—å) ===
  if (text === '/–º–∞—Ñ–∏—è –≤—Å—Ç—É–ø–∏—Ç—å') {
    if (!context.isChat) return;

    const game = games.get(chatId);
    if (!game || game.phase !== 'waiting') {
      return context.send('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞–ø–∏—à–∏—Ç–µ /–º–∞—Ñ–∏—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.');
    }

    if (game.players.includes(userId)) {
      return context.send('–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!');
    }

    game.players.push(userId);
    await context.send(`@id${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! (${game.players.length}/4)`);

    if (game.players.length >= 4) {
      clearTimeout(game.timer);
      startMafiaGame(chatId);
    }
  }
});

// === –§–£–ù–ö–¶–ò–Ø: –ó–ê–ü–£–°–ö –ò–ì–†–´ ===
async function startMafiaGame(chatId) {
  const game = games.get(chatId);
  if (!game) return;

  game.phase = 'day';

  const playerCount = game.players.length;
  const mafiaCount = playerCount >= 6 ? 2 : 1;
  const roles = Array(playerCount - mafiaCount).fill('–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å').concat(Array(mafiaCount).fill('–ú–∞—Ñ–∏—è'));
  game.roles = shuffle(roles);

  await vk.api.messages.send({
    chat_id: chatId,
    message: `üéâ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–§–∞–∑–∞: –î–µ–Ω—å 1\n–ú–∞—Ñ–∏—è: ${mafiaCount} —á–µ–ª–æ–≤–µ–∫.\n–û–±—Å—É–∂–¥–∞–π—Ç–µ –∏ –≥–æ–ª–æ—Å—É–π—Ç–µ!`,
    keyboard: {
      inline: false,
      buttons: [
        [
          { label: 'üó≥ –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å', payload: JSON.stringify({ cmd: 'vote' }) }
        ],
        [
          { label: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É', payload: JSON.stringify({ cmd: 'stop_game' }) }
        ]
      ]
    }
  });

  // –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –¥–µ–Ω—å/–Ω–æ—á—å
  scheduleNextPhase(chatId, 'night', 2);
}

// === –§–£–ù–ö–¶–ò–Ø: –°–ª–µ–¥—É—é—â–∞—è —Ñ–∞–∑–∞ ===
function scheduleNextPhase(chatId, nextPhase, minutes) {
  const game = games.get(chatId);
  if (!game) return;

  game.timer = setTimeout(async () => {
    if (nextPhase === 'night') {
      await vk.api.messages.send({
        chat_id: chatId,
        message: 'üåÉ –ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å. –í—Å–µ –∑–∞—Å—ã–ø–∞—é—Ç. –ú–∞—Ñ–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ —É–±–∏—Ç—å (–≤ –õ–° –±–æ—Ç—É: /—É–±–∏—Ç—å [–Ω–æ–º–µ—Ä])'
      });
      game.phase = 'night';
      scheduleNextPhase(chatId, 'day', 2);
    } else {
      await vk.api.messages.send({
        chat_id: chatId,
        message: '‚òÄÔ∏è –ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å. –í—Å–µ –ø—Ä–æ—Å—ã–ø–∞—é—Ç—Å—è. –û–±—Å—É–∂–¥–µ–Ω–∏–µ. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.',
        keyboard: {
          inline: false,
          buttons: [
            [
              { label: 'üó≥ –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å', payload: JSON.stringify({ cmd: 'vote' }) }
            ],
            [
              { label: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É', payload: JSON.stringify({ cmd: 'stop_game' }) }
            ]
          ]
        }
      });
      game.phase = 'day';
      scheduleNextPhase(chatId, 'night', 2);
    }
  }, minutes * 60 * 1000);
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –º–∞—Å—Å–∏–≤ ===
function shuffle(array) {
  return array.sort(() => Math.random() - 0.5);
}

// === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
updates.start().then(() => {
  console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...');
});